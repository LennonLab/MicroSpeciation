panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
S12 <- seq(0.385, 3.43, by = 0.005)*10^12
alpha12 <- (mu*(exp(r*Time)-1))/(lambda*exp(r*4000)-mu)
beta12 <- alpha12*(lambda/mu)
# eta <- lambda*(1 - exp(-1*r*t))/(lambda - mu*exp(-1*r*Time))
# Prob <- (1 - eta) * eta ^(S-1)
Prob12 <- double(length(alpha12))
RelProb12 <- double(length(alpha12))
NormProb12 <- double(length(alpha12))
for (i in 1:length(alpha12)){
prob_set <- (1-alpha12[i])*(1-beta12[i])*beta12[i]^(S12-1)
Prob12[i] <- sum(prob_set)
NormProb12[i] <- sum(prob_set*S12)
}
# Prob6 <- (1-alpha6)*(1-beta6)*beta6^(S6-1)
Prob12 <- ifelse(Prob12<0, 0, Prob12)
RelProb12 <- Prob12/max(Prob12)
df12 <- data.frame(lambda, epsilon, mu, r, Prob12, RelProb12, NormProb12)
(p2 <- ggplot(data = df12, aes(y = lambda, x = epsilon, color = NormProb12)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
S12 <- seq(0.385, 3.43, by = 0.005)*10^12
alpha12 <- (mu*(exp(r*Time)-1))/(lambda*exp(r*4000)-mu)
beta12 <- alpha12*(lambda/mu)
# eta <- lambda*(1 - exp(-1*r*t))/(lambda - mu*exp(-1*r*Time))
# Prob <- (1 - eta) * eta ^(S-1)
Prob12 <- double(length(alpha12))
RelProb12 <- double(length(alpha12))
NormProb12 <- double(length(alpha12))
for (i in 1:length(alpha12)){
prob_set <- (1-alpha12[i])*(1-beta12[i])*beta12[i]^(S12-1)
Prob12[i] <- sum(prob_set)
NormProb12[i] <- mean(prob_set*S12)
}
# Prob6 <- (1-alpha6)*(1-beta6)*beta6^(S6-1)
Prob12 <- ifelse(Prob12<0, 0, Prob12)
RelProb12 <- Prob12/max(Prob12)
df12 <- data.frame(lambda, epsilon, mu, r, Prob12, RelProb12, NormProb12)
(p2 <- ggplot(data = df12, aes(y = lambda, x = epsilon, color = NormProb12)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
S6 <- seq(2.2, 4.3, by = 0.01)*10^6
alpha6 <- (mu*(exp(r*Time)-1))/(lambda*exp(r*4000)-mu)
beta6 <- alpha6*(lambda/mu)
# eta <- lambda*(1 - exp(-1*r*t))/(lambda - mu*exp(-1*r*Time))
# Prob <- (1 - eta) * eta ^(S-1)
Prob6 <- double(length(alpha6))
RelProb6 <- double(length(alpha6))
for (i in 1:length(alpha6)){
prob_set <- (1-alpha6[i])*(1-beta6[i])*beta6[i]^(S6-1)
Prob6[i] <- sum(prob_set)
NormProb6[i] <- mean(prob_set*S6)
}
# Prob6 <- (1-alpha6)*(1-beta6)*beta6^(S6-1)
Prob6 <- ifelse(Prob6<0, 0, Prob6)
RelProb6 <- Prob6/max(Prob6)
df6 <- data.frame(lambda, epsilon, mu, r, Prob6, RelProb6, NormProb6)
(p3 <- ggplot(data = df6, aes(y = lambda, x = epsilon, color = NormProb6)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Probability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
6 <- seq(2.2, 4.3, by = 0.01)*10^6
alpha6 <- (mu*(exp(r*Time)-1))/(lambda*exp(r*4000)-mu)
beta6 <- alpha6*(lambda/mu)
# eta <- lambda*(1 - exp(-1*r*t))/(lambda - mu*exp(-1*r*Time))
# Prob <- (1 - eta) * eta ^(S-1)
Prob6 <- double(length(alpha6))
RelProb6 <- double(length(alpha6))
for (i in 1:length(alpha6)){
prob_set <- (1-alpha6[i])*(1-beta6[i])*beta6[i]^(S6-1)
Prob6[i] <- sum(prob_set)
NormProb6[i] <- mean(prob_set*S6)
}
# Prob6 <- (1-alpha6)*(1-beta6)*beta6^(S6-1)
Prob6 <- ifelse(Prob6<0, 0, Prob6)
RelProb6 <- Prob6/max(Prob6)
df6 <- data.frame(lambda, epsilon, mu, r, Prob6, RelProb6, NormProb6)
NormProb6 <- double(length(alpha6))
for (i in 1:length(alpha6)){
prob_set <- (1-alpha6[i])*(1-beta6[i])*beta6[i]^(S6-1)
Prob6[i] <- sum(prob_set)
NormProb6[i] <- mean(prob_set*S6)
}
Prob6 <- ifelse(Prob6<0, 0, Prob6)
RelProb6 <- Prob6/max(Prob6)
df6 <- data.frame(lambda, epsilon, mu, r, Prob6, RelProb6, NormProb6)
(p3 <- ggplot(data = df6, aes(y = lambda, x = epsilon, color = NormProb6)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Probability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
(1-alpha)*(1-beta)*beta^(2-1)
max((1-alpha)*(1-beta)*beta^(2-1))
summary(alpha12)
summary(alpha6)
## define parameters alpha and beta
sims = 400000 # number of simulations
lambda <- runif(n = sims, min = 0.008, max = 0.031) # speciation rates
epsilon <- runif(n = sims, min = 0.1, max = 0.9) # mu/lambda
mu <- lambda * epsilon # extinction rates
r <- lambda - mu # diversification rate
t <- 1
Time <- 4000 # total time to present
# alpha and beta are terms in the probability generating function
alpha <- (mu*(exp(r*Time)-1))/(lambda*exp(r*Time)-mu)
beta <- alpha*(lambda/mu)
## probability generating function
pgf <- function(S){
# if only testing the probability of exactly one species richness,
# the process is shorter
if (is.double(S)){
Prob <- (1-alpha)*(1-beta)*beta^(S-1) # actual PGF from Raup 1985 (A17)
Prob <- ifelse(Prob<0, 0, Prob) # Probability axioms state they can't be < 0
RelProb <- Prob/max(Prob)
NormProb <- (Prob - mean(Prob))/sd(Prob)
} else { # if testing probability of reaching several different richnesses
# Vectorize to reduce runtime
Prob <- double(length(alpha))
RelProb <- double(length(alpha12))
NormProb <- double(length(alpha12))
for (i in 1:length(alpha)){
prob_set <- (1-alpha[i])*(1-beta[i])*beta[i]^(S-1)
Prob[i] <- sum(prob_set)
NormProb[i] <- mean(prob_set*S)
}
Prob <- ifelse(Prob<0, 0, Prob)
RelProb <- Prob/max(Prob)
}
return(data.frame(Prob, RelProb, NormProb))
}
df12 <- data.frame(lambda, epsilon, pgf(S = S12))
S12 <- 10^12
df12 <- data.frame(lambda, epsilon, pgf(S = S12))
(p1 <- ggplot(data = df12, aes(x = lambda, y = epsilon, color = RelProb)) +
geom_point(size = 0.4) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
is.double(c(1.1212, 1.1029012))
is.vector(c(1.1212, 1.1029012))
is.vector(1.2121)
S12 <- seq(0.385, 3.43, by = 0.005)*10^12
df12 <- data.frame(lambda, epsilon, pgf(S = S12))
## probability generating function
pgf <- function(S){
# if only testing the probability of exactly one species richness,
# the process is shorter
if (length(S) == 1){
Prob <- (1-alpha)*(1-beta)*beta^(S-1) # actual PGF from Raup 1985 (A17)
Prob <- ifelse(Prob<0, 0, Prob) # Probability axioms state they can't be < 0
RelProb <- Prob/max(Prob)
NormProb <- (Prob - mean(Prob))/sd(Prob)
} else { # if testing probability of reaching several different richnesses
# Vectorize to reduce runtime
Prob <- double(length(alpha))
RelProb <- double(length(alpha12))
NormProb <- double(length(alpha12))
for (i in 1:length(alpha)){
prob_set <- (1-alpha[i])*(1-beta[i])*beta[i]^(S-1)
Prob[i] <- sum(prob_set)
NormProb[i] <- mean(prob_set*S)
}
Prob <- ifelse(Prob<0, 0, Prob)
RelProb <- Prob/max(Prob)
}
return(data.frame(Prob, RelProb, NormProb))
}
df12 <- data.frame(lambda, epsilon, pgf(S = S12))
(p2 <- ggplot(data = df12, aes(y = lambda, x = epsilon, color = NormProb12)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
(p2 <- ggplot(data = df12, aes(y = lambda, x = epsilon, color = NormProb)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
rm(list=ls()) # removes all objects in the given environment
wd <- "~/Documents/LennonLab/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
getwd()
setwd(wd)
require(ggplot2)
require(viridis)
## define parameters alpha and beta
sims = 400000 # number of simulations
lambda <- runif(n = sims, min = 0.008, max = 0.031) # speciation rates
epsilon <- runif(n = sims, min = 0.1, max = 0.9) # mu/lambda
mu <- lambda * epsilon # extinction rates
r <- lambda - mu # diversification rate
t <- 1
Time <- 4000 # total time to present
# alpha and beta are terms in the probability generating function
alpha <- (mu*(exp(r*Time)-1))/(lambda*exp(r*Time)-mu)
beta <- alpha*(lambda/mu)
## probability generating function
pgf <- function(S){
# if only testing the probability of exactly one species richness,
# the process is shorter
if (length(S) == 1){
Prob <- (1-alpha)*(1-beta)*beta^(S-1) # actual PGF from Raup 1985 (A17)
Prob <- ifelse(Prob<0, 0, Prob) # Probability axioms state they can't be < 0
RelProb <- Prob/max(Prob)
NormProb <- (Prob - mean(Prob))/sd(Prob)
} else { # if testing probability of reaching several different richnesses
# Vectorize to reduce runtime
Prob <- double(length(alpha))
RelProb <- double(length(alpha12))
NormProb <- double(length(alpha12))
for (i in 1:length(alpha)){
prob_set <- (1-alpha[i])*(1-beta[i])*beta[i]^(S-1)
Prob[i] <- sum(prob_set)
NormProb[i] <- mean(prob_set*S)
}
Prob <- ifelse(Prob<0, 0, Prob)
RelProb <- Prob/max(Prob)
}
return(data.frame(Prob, RelProb, NormProb))
}
S12_mult <- seq(0.385, 3.43, by = 0.005)*10^12
df12 <- data.frame(lambda, epsilon, pgf(S = S12_mult))
# alpha12 <- (mu*(exp(r*Time)-1))/(lambda*exp(r*4000)-mu)
# beta12 <- alpha12*(lambda/mu)
#
# # eta <- lambda*(1 - exp(-1*r*t))/(lambda - mu*exp(-1*r*Time))
#
# # Prob <- (1 - eta) * eta ^(S-1)
# Prob12 <- double(length(alpha12))
# RelProb12 <- double(length(alpha12))
# NormProb12 <- double(length(alpha12))
# for (i in 1:length(alpha12)){
#   prob_set <- (1-alpha12[i])*(1-beta12[i])*beta12[i]^(S12-1)
#   Prob12[i] <- sum(prob_set)
#   NormProb12[i] <- mean(prob_set*S12)
# }
# # Prob6 <- (1-alpha6)*(1-beta6)*beta6^(S6-1)
# Prob12 <- ifelse(Prob12<0, 0, Prob12)
# RelProb12 <- Prob12/max(Prob12)
#
# df12 <- data.frame(lambda, epsilon, mu, r, Prob12, RelProb12, NormProb12)
(p2 <- ggplot(data = df12, aes(y = lambda, x = epsilon, color = NormProb)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
S12_mult <- seq(0.385, 3.43, by = 0.005)*10^12
df12_mult <- data.frame(lambda, epsilon, pgf(S = S12_mult))
# alpha12 <- (mu*(exp(r*Time)-1))/(lambda*exp(r*4000)-mu)
# beta12 <- alpha12*(lambda/mu)
#
# # eta <- lambda*(1 - exp(-1*r*t))/(lambda - mu*exp(-1*r*Time))
#
# # Prob <- (1 - eta) * eta ^(S-1)
# Prob12 <- double(length(alpha12))
# RelProb12 <- double(length(alpha12))
# NormProb12 <- double(length(alpha12))
# for (i in 1:length(alpha12)){
#   prob_set <- (1-alpha12[i])*(1-beta12[i])*beta12[i]^(S12-1)
#   Prob12[i] <- sum(prob_set)
#   NormProb12[i] <- mean(prob_set*S12)
# }
# # Prob6 <- (1-alpha6)*(1-beta6)*beta6^(S6-1)
# Prob12 <- ifelse(Prob12<0, 0, Prob12)
# RelProb12 <- Prob12/max(Prob12)
#
# df12 <- data.frame(lambda, epsilon, mu, r, Prob12, RelProb12, NormProb12)
(p2 <- ggplot(data = df12_mult, aes(y = lambda, x = epsilon, color = NormProb)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
S12_mult <- seq(0.385, 3.43, by = 0.005)*10^12
df12_mult <- data.frame(lambda, epsilon, pgf(S = S12_mult))
S12_mult <- seq(0.385, 3.43, by = 0.005)*10^12
df12_mult <- data.frame(lambda, epsilon, pgf(S = S12_mult))
# alpha12 <- (mu*(exp(r*Time)-1))/(lambda*exp(r*4000)-mu)
# beta12 <- alpha12*(lambda/mu)
#
# # eta <- lambda*(1 - exp(-1*r*t))/(lambda - mu*exp(-1*r*Time))
#
# # Prob <- (1 - eta) * eta ^(S-1)
# Prob12 <- double(length(alpha12))
# RelProb12 <- double(length(alpha12))
# NormProb12 <- double(length(alpha12))
# for (i in 1:length(alpha12)){
#   prob_set <- (1-alpha12[i])*(1-beta12[i])*beta12[i]^(S12-1)
#   Prob12[i] <- sum(prob_set)
#   NormProb12[i] <- mean(prob_set*S12)
# }
# # Prob6 <- (1-alpha6)*(1-beta6)*beta6^(S6-1)
# Prob12 <- ifelse(Prob12<0, 0, Prob12)
# RelProb12 <- Prob12/max(Prob12)
#
# df12 <- data.frame(lambda, epsilon, mu, r, Prob12, RelProb12, NormProb12)
(p2 <- ggplot(data = df12_mult, aes(y = lambda, x = epsilon, color = NormProb)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
S12_mult <- seq(0.385, 3.43, by = 0.005)*10^12
df12_mult <- data.frame(lambda, epsilon, pgf(S = S12_mult))
## probability generating function
pgf <- function(S){
# if only testing the probability of exactly one species richness,
# the process is shorter
if (length(S) == 1){
Prob <- (1-alpha)*(1-beta)*beta^(S-1) # actual PGF from Raup 1985 (A17)
Prob <- ifelse(Prob<0, 0, Prob) # Probability axioms state they can't be < 0
RelProb <- Prob/max(Prob)
NormProb <- (Prob - mean(Prob))/sd(Prob)
} else { # if testing probability of reaching several different richnesses
# Vectorize to reduce runtime
Prob <- double(length(alpha))
RelProb <- double(length(alpha))
NormProb <- double(length(alpha))
for (i in 1:length(alpha)){
prob_set <- (1-alpha[i])*(1-beta[i])*beta[i]^(S-1)
Prob[i] <- sum(prob_set)
NormProb[i] <- mean(prob_set*S)
}
Prob <- ifelse(Prob<0, 0, Prob)
RelProb <- Prob/max(Prob)
}
return(data.frame(Prob, RelProb, NormProb))
}
(p2 <- ggplot(data = df12_mult, aes(y = lambda, x = epsilon, color = NormProb)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
S12_mult <- seq(0.385, 3.43, by = 0.005)*10^12
df12_mult <- data.frame(lambda, epsilon, pgf(S = S12_mult))
(p2 <- ggplot(data = df12_mult, aes(y = lambda, x = epsilon, color = NormProb)) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
type <- ifelse(type!="RelProb"&type!="NormProb"|type!="Prob","RelProb",type)
## plot relative, normalized, or unaltered probabilities
relprob <- function(df, type = "RelProb"){
type <- ifelse(type!="RelProb"&type!="NormProb"|type!="Prob","RelProb",type)
return(ggplot(data = df, aes(y = lambda, x = epsilon, color = get(type))) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank()))
}
probPlot(dfS12)
## plot relative, normalized, or unaltered probabilities
probPlot <- function(df, type = "RelProb"){
type <- ifelse(type!="RelProb"&type!="NormProb"|type!="Prob","RelProb",type)
return(ggplot(data = df, aes(y = lambda, x = epsilon, color = get(type))) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank()))
}
probPlot(dfS12)
# Probability of having exactly 10^12 species
S12 <- 10^12
dfS12 <- data.frame(lambda, epsilon, pgf(S = S12))
probPlot(dfS12)
probPlot(dfS12, type = "NormProb")
## plot relative, normalized, or unaltered probabilities
probPlot <- function(df, type = "RelProb"){
type <- ifelse(type!="RelProb"&type!="NormProb"&type!="Prob","RelProb",type)
return(ggplot(data = df, aes(y = lambda, x = epsilon, color = get(type))) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Relative\nProbability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank()))
}
probPlot(dfS12, type = "NormProb")
type = "NormProb"
type!="RelProb"&type!="NormProb"&type!="Prob"
type = "Prob"
type!="RelProb"&type!="NormProb"&type!="Prob"
type = "P"
type!="RelProb"&type!="NormProb"&type!="Prob"
ifelse(type!="RelProb"&type!="NormProb"&type!="Prob","RelProb",type)
type = "Prob"
ifelse(type!="RelProb"&type!="NormProb"&type!="Prob","RelProb",type)
probPlot(dfS12, type = "NormProb")
S12
## plot relative, normalized, or unaltered probabilities
probPlot <- function(df, type = "RelProb"){
type <- ifelse(type!="RelProb"&type!="NormProb"&type!="Prob","RelProb",type)
prob_scale <- ifelse(type=="RelProb","Relative\nProbability",
ifelse(type=="NormProb","Normalized\nProbability","Probability"))
return(ggplot(data = df, aes(y = lambda, x = epsilon, color = get(type))) +
geom_point(size = 0.4) +
ylab(expression(lambda*" (Species/Myr)")) +
scale_x_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis(prob_scale) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank()))
}
probPlot(dfS12, type = "NormProb")
probPlot(dfS12, type = "Prob")
probPlot(dfS12_mult, type = "NormProb")
# Probability of being in range for Locey & Lennon 2016
S12_mult <- seq(0.385, 3.43, by = 0.005)*10^12
dfS12_mult <- data.frame(lambda, epsilon, pgf(S = S12_mult))
probPlot(dfS12_mult, type = "NormProb")
# Probability of being in range for Louca et al. 2019
S6_mult <- seq(2.2, 4.3, by = 0.01)*10^6
dfS6_mult <- data.frame(lambda, epsilon, pgf(S = S6_mult))
pS6_mult <- probPlot(dfS6_mult, type = "NormProb")
pS6_mult
a <- 1
a -> b
b
