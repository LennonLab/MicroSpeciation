theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_line(colour = "black")
))
S1
r
r[1]
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/MicroSpeciationLinePlot.R')
(p1 <- ggplot(data = df, aes(y = logrichness, x = time, group = as.character(epsilon))) +
geom_line(aes(linetype = as.character(epsilon))) +
scale_x_continuous("Time (Myr)", expand = c(0,0)) +
scale_y_continuous("Log(Richness)", breaks = seq(0,32,4), expand = c(0,0)) +
scale_linetype_discrete(expression(epsilon)) +
geom_vline(xintercept = EeStart, linetype = "dotted", color = "red") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_line(colour = "black")
))
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/MicroSpeciationLinePlot.R')
(p1 <- ggplot(data = df, aes(y = logrichness, x = time, group = as.character(epsilon))) +
geom_line(aes(linetype = as.character(epsilon))) +
scale_x_continuous("Time (Myr)", expand = c(0,0)) +
scale_y_continuous("Log(Richness)", breaks = seq(0,32,4), expand = c(0,0)) +
scale_linetype_discrete(expression(epsilon)) +
geom_vline(xintercept = EeStart, linetype = "dotted", color = "red") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_line(colour = "black")
))
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/MicroSpeciationLinePlot.R')
(p1 <- ggplot(data = df, aes(y = logrichness, x = time, group = as.character(epsilon))) +
geom_line(aes(linetype = as.character(epsilon))) +
scale_x_continuous("Time (Myr)", expand = c(0,0)) +
scale_y_continuous("Log(Richness)", breaks = seq(0,32,4), expand = c(0,0)) +
scale_linetype_discrete(expression(epsilon)) +
geom_vline(xintercept = EeStart, linetype = "dotted", color = "red") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_line(colour = "black")
))
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/MicroSpeciationLinePlot.R')
(p1 <- ggplot(data = df, aes(y = logrichness, x = time, group = as.character(epsilon))) +
geom_line(aes(linetype = as.character(epsilon))) +
scale_x_continuous("Time (Myr)", expand = c(0,0)) +
scale_y_continuous("Log(Richness)", breaks = seq(0,32,4), expand = c(0,0)) +
scale_linetype_discrete(expression(epsilon)) +
geom_vline(xintercept = EeStart, linetype = "dotted", color = "red") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_line(colour = "black")
))
df <- data.frame(logrichness = c(log10(S1), log10(S2), log10(S3)), time = c(1:4000, 1:4000, 1:4000), lambda = c(double(4000) + lambda[1], double(4000) + lambda[2], double(4000) + lambda[3]))
(p1 <- ggplot(data = df, aes(y = logrichness, x = time, group = as.character(lambda))) +
geom_line(aes(linetype = as.character(lambda))) +
scale_x_continuous("Time (Myr)", expand = c(0,0)) +
scale_y_continuous("Log(Richness)", breaks = seq(0,32,4), expand = c(0,0)) +
scale_linetype_discrete(expression(lambda)) +
geom_vline(xintercept = EeStart, linetype = "dotted", color = "red") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_line(colour = "black")
))
fig_dir <- paste(figure_dir, "ExtinctionEvents_lambdalineplots.png", sep = "")
ggsave(plot = p1, filename = fig_dir, width = 7, height = 5)
rm(list=ls()) # removes all objects in the given environment
wd <- "~/Documents/LennonLab/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
getwd()
setwd(wd)
# Load packages
require("png")
require("grid")
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(viridis))
# Used for binning into colors for heatmap
rounding_scheme <- function(S){
logS <-  log10(S)
# roundS <- ifelse(logS > 30, 30, logS) # Anything >10^30 is one color
roundS <- ifelse(logS > 23, 23, logS) # Anything <10^30 and >10^20 is another color
roundS <- ifelse(roundS < 4, 4, roundS) # can't be less than 0
roundS <- floor(roundS) # round down order of magnitude
return(data.frame(logS, roundS))
}
lambda <- runif(n = 40000, min = 0.008, max = 0.031) # speciation rates
# epsilon <- 10^runif(n = 40000, min = -1, max = -0.05) # mu/lambda
epsilon <- runif(n = 40000, min = 0.1, max = 0.9) # mu/lambda
mu <- lambda * epsilon # extinction rates
r <- lambda - mu # diversification rate
S0 <- 1
S <- S0 * exp(r*4000) # Species richness under exponential growth (pure birth)
df1 <- data.frame(lambda, epsilon, mu, r, S)
df1 <- cbind(df1, rounding_scheme(S))
# heatmap made from scatter plot
(p1 <- ggplot(data = df1, aes(x = lambda, y = epsilon, color = roundS)) +
geom_point(size = 1.8) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Log(Richness)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
# Save figure
fig1_dir <- paste(figure_dir, "LambdaVSEpsilon_ConstantRatesHeatmap.png", sep = "")
ggsave(plot = p1, filename = fig1_dir, width = 7, height = 5)
### VARIABLE EXTINCTION
# Note: reduce number of simulations to reduce run time
# I used 400000 to make the heatmap more smooth
lambda <- runif(n = 40000, min = 0.008, max = 0.031) # speciation rates
epsilon <- runif(n = 40000, min = 0.1, max = 0.9) # mu/lambda
mu <- c() # extinction rates
r <- c()
S <- integer(length = 40000) + 1 # keeps track of species for each set of parameters
for(t in 2:4000) {
ep <- rnorm(n = epsilon, mean = epsilon, sd = 0.2) # give me an epsilon near the actual epsilon for all simulations per time step
ep <- ifelse(ep<0,0.01,ep) # if Eb is ever less than 0, make it 0.1
ep <- ifelse(ep>1,0.9,ep)
mu <- lambda * ep
r <- lambda - mu # diversification rate
S <- S * exp(r) # discrete exponential growth, pure birth
}
df2 <- data.frame(lambda, epsilon, mu, r, S)
df2 <- cbind(df2, rounding_scheme(S))
# heatmap 2
(p2 <- ggplot(data = df2, aes(x = lambda, y = epsilon, color = roundS)) +
geom_point(size = 1.8) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Log(Richness)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
# Save figure
fig2_dir <- paste(figure_dir, "LambdaVSEpsilon_VariableRatesHeatmap.png", sep = "")
ggsave(plot = p2, filename = fig2_dir, width = 7, height = 5)
# Load data for extinction events
# Say x is diversity and y is extinction intensity for an era lasting 3 years
# Current dataset has data like the following for an era lasting 3 My:
# Time  Diversity   ExtinctionIntensity
# t     x           y
# t+1   x           y
# t+2   x           y
# I'm altering it to look like this to spread out extinction over
# the entire length of the era:
# Time  ExtinctionIntensity
# t     y/3
# t+1   y/3
# t+1   y/3
ext_file <- paste(data_dir, "Extinction_Rohde_Muller_raw.csv", sep = "")
ext <- read.csv(ext_file)
avg_ext <- c()
# Average out exitinction percentage over entire time period
for (i in 1:nrow(ext)){
if (i == 1){
# First entry in the dataframe starts a paleontologic era
era <- c(ext$ExtinctionIntensity[i])
# For all entries after the first:
} else {
# I assume that when either ExtinctionIntensity or Diversity changes,
# then a new era has begun, otherwise, an era continues
if (ext$Diversity[i] == ext$Diversity[i-1] & ext$ExtinctionIntensity[i] == ext$ExtinctionIntensity[i-1]) {
era <- c(era, ext$ExtinctionIntensity[i])
if (i == nrow(ext)) { # if the last entry is its own era
# integer(x) makes a vector of zeros of length x
# the mean of extinction intensity is evenly distributed over an era's duration
# avg_ext <- c(avg_ext, integer(length(era)) + mean(era)/length(era))
a <- integer(length(era))
a[length(a)] <- mean(era)
avg_ext <- c(avg_ext, a)
}
} else { # if a new era is beginning
# Add previous era into vector
a <- integer(length(era))
a[length(a)] <- mean(era)
avg_ext <- c(avg_ext, a)
era <- c(ext$ExtinctionIntensity[i]) # begin recording new era
if (i == nrow(ext)) { # if the last entry is part of another era
a <- integer(length(era))
a[length(a)] <- mean(era)
avg_ext <- c(avg_ext, a)
}
}
}
}
# Add back into dataframe
ext <- cbind(ext, AverageExtinction = avg_ext)
ext$time <- as.character(4000 - ext$Mya)
names(avg_ext) <- ext$time
avg_ext <- avg_ext[order(names(avg_ext))]/100
### VARIABLE EXTINCTION w/ SOME FIXED EXTINCTION
lambda <- runif(n = 40000, min = 0.008, max = 0.031) # speciation rates
epsilon <- runif(n = 40000, min = 0.1, max = 0.9) # mu/lambda
mu <- c() # extinction rates
r <- c()
S <- integer(length = 40000) + 1 # keeps track of species for each set of parameters
EeStart <- as.integer(names(avg_ext[1])) # first year with data
# Simulate, but replace random background extinction levels
# with "known" extinction rates for macroorganisms for "recent" years
for(t in 2:4000) {
if (t < EeStart){ # before data, make extinction be random
ep <- rnorm(n = epsilon, mean = epsilon, sd = 0.05) # give me an epsilon near the actual epsilon for all simulations per time step
ep <- ifelse(ep<0,0.01,ep) # if epsilon is ever less than 0, make it 0.1
ep <- ifelse(ep>1,0.9,ep) # don't want epsilon above 0.9
mu <- lambda * ep
r <- lambda - mu # diversification rate
S <- S * exp(r) # discrete exponential growth, pure birth
} else { # when extinction data starts, use it in place of random data
ep <- avg_ext[t - EeStart + 1]
r <- lambda # diversification rate is just lambda
S <- S * exp(r)* (1 - ep) # ep % of population dies
}
}
df3 <- data.frame(lambda, epsilon, mu, r, S)
df3 <- cbind(df3, rounding_scheme(S))
# heatmap 3
(p3 <- ggplot(data = df3, aes(x = lambda, y = epsilon, color = roundS)) +
geom_point(size = 1.8) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Log(Richness)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
fig3_dir <- paste(figure_dir, "LambdaVSEpsilon_EeVariableRatesHeatmap.png", sep = "")
ggsave(plot = p3, filename = fig3_dir, width = 7, height = 5)
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates.R')
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (My)") +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (My)") +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "A") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (My)") +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "B") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (My)") +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (My)") +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "D") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (My)") +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (My)", expand = c(0, 0)) +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (My)", expand = c(0, 0), breaks = c(0, 1000, 2000, 3000, 4000)) +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (Myr)", expand = c(0, 0), breaks = c(0, 1000, 2000, 3000, 4000)) +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (Myr)", breaks = c(0, 1000, 2000, 3000, 4000)) +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
S_total
species
summary(species)
head(species$`0.1`)
head(species$`0.9`)
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
head(species$`0.9`)
head(species$`0.1`)
S_total
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
S_total
S_total[4000]
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`), log10(S_total)),
time = c(1:4000, 1:4000,1:4000,1:4000),
label = c("0.1", "0.5", "0.9", "total"))
ggplot(df, aes(y = logrichness, x = time, color = label)) +
geom_line()
ggplot(df, aes(y = logrichness, x = time, group = label)) +
geom_line()
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`)),
time = c(1:4000, 1:4000,1:4000),
label = c("0.1", "0.5", "0.9"))
ggplot(df, aes(y = logrichness, x = time, group = label)) +
geom_line()
species$`0.5`
species$`0.9`
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`)),
time = c(1:4000, 1:4000,1:4000),
label = c("0.1", "0.5", "0.9"))
ggplot(df, aes(y = logrichness, x = time, group = label)) +
geom_line()
head(species$`0.1`)
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`)),
time = c(1:4000, 1:4000,1:4000),
label = c("0.1", "0.5", "0.9"))
ggplot(df, aes(y = logrichness, x = time, group = label)) +
geom_line()
S_total[4000]
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`)),
time = c(1:4000, 1:4000,1:4000),
label = c("0.1", "0.5", "0.9"))
ggplot(df, aes(y = logrichness, x = time, group = label)) +
geom_line()
View(df)
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
ggplot(df, aes(y = logrichness, x = time, group = as.character(label))) +
geom_line()
ggplot(df[label == "0.9"], aes(y = logrichness, x = time, group = as.character(label))) +
geom_line()
ggplot(df[,label == "0.9"], aes(y = logrichness, x = time, group = as.character(label))) +
geom_line()
ggplot(null, aes(y = species$`0.9`, x = 1:4000)) +
geom_line()
ggplot(NULL, aes(y = species$`0.9`, x = 1:4000)) +
geom_line()
ggplot(NULL, aes(y = species$`0.5`, x = 1:4000)) +
geom_line()
ggplot(NULL, aes(y = species$`0.1`, x = 1:4000)) +
geom_line()
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`)),
time = c(1:4000, 1:4000,1:4000),
label = c(double(4000) + 0.1, double(4000) + 0.5, double(4000) + 0.9))
ggplot(df, aes(y = logrichness, x = time, group = as.character(label))) +
geom_line()
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
ggplot(df, aes(y = logrichness, x = time, group = as.character(label))) +
geom_line()
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
ggplot(df, aes(y = logrichness, x = time, group = as.character(label))) +
geom_line()
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`)),
time = c(1:4000, 1:4000,1:4000),
label = c(double(4000) + 0.1, double(4000) + 0.5, double(4000) + 0.9))
ggplot(df, aes(y = logrichness, x = time, group = as.character(label))) +
geom_line()
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
ggplot(df, aes(y = logrichness, x = time, group = as.character(label))) +
geom_line()
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line()
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`), log10(S_total)),
time = c(1:4000, 1:4000,1:4000),
label = c(as.character(double(4000) + 0.1), as.character(double(4000) + 0.5), as.character(double(4000) + 0.9), "Total"))
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`), log10(S_total)),
time = c(1:4000, 1:4000,1:4000),
label = c(as.character(double(4000) + 0.1), as.character(double(4000) + 0.5), as.character(double(4000) + 0.9), character(4000) + "Total"))
character(2)
label = c(as.character(double(4000) + 0.1), as.character(double(4000) + 0.5), as.character(double(4000) + 0.9), paste(character(4000),"Total", sep = ""))
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line()
label = c(as.character(double(4000) + 0.1), as.character(double(4000) + 0.5), as.character(double(4000) + 0.9), character(4000))
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line()
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line() +
scale_color_viridis("adad")
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line() +
scale_color_viridis("adad", discrete = T)
length(S_total)
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`), log10(S_total)),
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`), log10(S_total)),
time = c(1:4000, 1:4000,1:4000, 1:4000),
label = c(as.character(double(4000) + 0.1), as.character(double(4000) + 0.5), as.character(double(4000) + 0.9), character(4000)))
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line() +
scale_color_viridis("adad", discrete = T)
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`), log10(S_total)),
time = c(1:4000, 1:4000,1:4000, 1:4000),
label = c(as.character(double(4000) + 0.1), as.character(double(4000) + 0.5), as.character(double(4000) + 0.9), character(4000)))
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line() +
scale_color_viridis("adad", discrete = T)
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`), log10(S_total)),
time = c(1:4000, 1:4000,1:4000, 1:4000),
label = c(as.character(double(4000) + 0.1), as.character(double(4000) + 0.5), as.character(double(4000) + 0.9), paste(character(4000), "Total", sep = "")))
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line() +
scale_color_viridis("adad", discrete = T)
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line() +
scale_color_viridis("adad", discrete = T)
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates2.R')
df <- data.frame(logrichness = c(log10(species$`0.1`), log10(species$`0.5`), log10(species$`0.9`), log10(S_total)),
time = c(1:4000, 1:4000,1:4000, 1:4000),
label = c(as.character(double(4000) + 0.1), as.character(double(4000) + 0.5), as.character(double(4000) + 0.9), paste(character(4000), "Total", sep = "")))
ggplot(df, aes(y = logrichness, x = time, color = as.character(label))) +
geom_line() +
scale_color_viridis("adad", discrete = T)
source('~/Documents/LennonLab/GitHub/MicroSpeciation/code/CladeRates.R')
(p1<- ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (Myr)", breaks = c(0, 1000, 2000, 3000, 4000)) +
scale_y_log10(limits = c(1, S_total[4000]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
)
fig_dir <- paste(figure_dir, "VariableCladeRates.png", sep = "")
ggsave(plot = p1, filename = fig_dir, width = 7, height = 5)
(p1<- ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.3) +
scale_x_continuous("Time (Myr)", breaks = c(0, 1000, 2000, 3000, 4000)) +
scale_y_log10(breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") +
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
)
