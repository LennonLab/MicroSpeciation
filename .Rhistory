# Load packages
require("png")
require("grid")
require("tidyr")
require("ggplot2")
require("viridis")
# Set up parameters
time <- 4000
epsilon <- seq(0.1,0.9, by = 0.05) # possible range of relative extinction rates (epsilon)
# set up matrix with columns being clade extinction rate and rows representing species over timr
species <- matrix(double(time * length(epsilon)),nrow = time, ncol = length(epsilon))
colnames(species) <-  as.character(epsilon)
# starting species has the following relative extinction rate:
species[1, "0.7"] = 1
S_total <- double(time)
S_total[1] <- 1.0 # only 1 starting species
lambda <- 0.015 # speciation/my, set for the entire simulation
# mu <- epsilon * lambda # extinction/my
# r <- lambda - mu # diversification/my
# a modifier to add in time-based heterogeneity in extinction
mod <- rnorm(time, mean=0, sd=0.1)
# function similating diversification process
# taken from CladeRates.R, only difference is time variability in relative extinction rates
# Clades at a given level of relative extinction speciate into clades with slighly lower or higher extinction
# Up to 6% of a clades newly speciated members change their relative extinction rate
# Arguments:
# epsilon - the given relative extinction rate of the current clade
# clades - the richness levels of all clades organized by time and clade
# ind - the current time
timestep <- function(ep, clades, ind){
ep <- as.character(ep) # what intial epsilon does this clade have
i <- match(ep, epsilon) # index of that epsilon value in the vector
# needed to know which other possible values of epsilon are nearby
mu <- abs(epsilon + mod[ind])* lambda # extinction/my
r <- lambda - mu # diversification/my
# if this is the lowest value of epsilon
if (i == 1){
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.97 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
clades[ind-1, ep]
# if this is the second lowest value of epsilon
} else if (i == 2){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.95 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
clades[ind-1, ep]
# if this is the second highest level of epsilon
} else if (epsilon[i] == epsilon[length(epsilon) -1]){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
clades[ind, ep] <- 0.95 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1, ep2_] * (r[i-2]) +
clades[ind-1, ep]
# if this is the highest level of epsilon
} else if (epsilon[i] == epsilon[length(epsilon)]){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
clades[ind, ep] <- 0.97 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1,ep2_] * (r[i-2]) +
clades[ind-1, ep]
# if this is any other value of epsilon
} else{
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.94 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1,ep2_] * (r[i-2]) +
clades[ind-1, ep]
}
return(clades)
}
# run the function
for (i in 2:time){
for (ep in epsilon){
species <- timestep(ep = ep, clades = species, ind = i)
}
}
S_total <- rev(apply(species,MARGIN = 1,FUN = sum)) # total up the species across clades, put into reverse chronological order
df <- as.data.frame(species)
df$time <- time:1 # want years to start at 4000 mya
species_df <- gather(df, key = epsilon, value = Richness, `0.1`:`0.9`)
species_df$Richness <- ifelse(species_df$Richness == 0, 10^-20, species_df$Richness)
(p1<- ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.5) +
scale_x_reverse("Time (Mya)", breaks = c(0, 1000, 2000, 3000, 4000)) +
scale_y_log10(limits = c(1, S_total[1]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") + # total number of species
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
)
## SETUP ENVIRONMENT
rm(list=ls()) # removes all objects in the given environment
wd <- "~/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
getwd()
setwd(wd)
# Load packages
require("png")
require("grid")
require("tidyr")
require("ggplot2")
require("viridis")
# Set up parameters
time <- 4000
epsilon <- seq(0.1,0.9, by = 0.05) # possible range of relative extinction rates (epsilon)
# set up matrix with columns being clade extinction rate and rows representing species over timr
species <- matrix(double(time * length(epsilon)),nrow = time, ncol = length(epsilon))
colnames(species) <-  as.character(epsilon)
# starting species has the following relative extinction rate:
species[1, "0.7"] = 1
S_total <- double(time)
S_total[1] <- 1.0 # only 1 starting species
lambda <- 0.015 # speciation/my, set for the entire simulation
# mu <- epsilon * lambda # extinction/my
# r <- lambda - mu # diversification/my
# a modifier to add in time-based heterogeneity in extinction
mod <- rnorm(time, mean=0, sd=0.2)
# function similating diversification process
# taken from CladeRates.R, only difference is time variability in relative extinction rates
# Clades at a given level of relative extinction speciate into clades with slighly lower or higher extinction
# Up to 6% of a clades newly speciated members change their relative extinction rate
# Arguments:
# epsilon - the given relative extinction rate of the current clade
# clades - the richness levels of all clades organized by time and clade
# ind - the current time
timestep <- function(ep, clades, ind){
ep <- as.character(ep) # what intial epsilon does this clade have
i <- match(ep, epsilon) # index of that epsilon value in the vector
# needed to know which other possible values of epsilon are nearby
mu <- abs(epsilon + mod[ind])* lambda # extinction/my
r <- lambda - mu # diversification/my
# if this is the lowest value of epsilon
if (i == 1){
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.97 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
clades[ind-1, ep]
# if this is the second lowest value of epsilon
} else if (i == 2){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.95 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
clades[ind-1, ep]
# if this is the second highest level of epsilon
} else if (epsilon[i] == epsilon[length(epsilon) -1]){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
clades[ind, ep] <- 0.95 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1, ep2_] * (r[i-2]) +
clades[ind-1, ep]
# if this is the highest level of epsilon
} else if (epsilon[i] == epsilon[length(epsilon)]){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
clades[ind, ep] <- 0.97 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1,ep2_] * (r[i-2]) +
clades[ind-1, ep]
# if this is any other value of epsilon
} else{
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.94 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1,ep2_] * (r[i-2]) +
clades[ind-1, ep]
}
return(clades)
}
# run the function
for (i in 2:time){
for (ep in epsilon){
species <- timestep(ep = ep, clades = species, ind = i)
}
}
S_total <- rev(apply(species,MARGIN = 1,FUN = sum)) # total up the species across clades, put into reverse chronological order
df <- as.data.frame(species)
df$time <- time:1 # want years to start at 4000 mya
species_df <- gather(df, key = epsilon, value = Richness, `0.1`:`0.9`)
species_df$Richness <- ifelse(species_df$Richness == 0, 10^-20, species_df$Richness)
(p1<- ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.5) +
scale_x_reverse("Time (Mya)", breaks = c(0, 1000, 2000, 3000, 4000)) +
scale_y_log10(limits = c(1, S_total[1]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") + # total number of species
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
)
fig_dir <- paste(figure_dir, "VariableTimeCladeRates.png", sep = "")
ggsave(plot = p1, filename = fig_dir, width = 7, height = 5)
## SETUP ENVIRONMENT
rm(list=ls()) # removes all objects in the given environment
wd <- "~/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
getwd()
setwd(wd)
# Load packages
require("png")
require("grid")
require("tidyr")
require("ggplot2")
require("viridis")
# Set up parameters
time <- 4000
epsilon <- seq(0.1,0.9, by = 0.05) # possible range of relative extinction rates (epsilon)
# set up matrix with columns being clade extinction rate and rows representing species over timr
species <- matrix(double(time * length(epsilon)),nrow = time, ncol = length(epsilon))
colnames(species) <-  as.character(epsilon)
# starting species has the following relative extinction rate:
species[1, "0.7"] = 1
S_total <- double(time)
S_total[1] <- 1.0 # only 1 starting species
lambda <- 0.015 # speciation/my, set for the entire simulation
# mu <- epsilon * lambda # extinction/my
# r <- lambda - mu # diversification/my
# a modifier to add in time-based heterogeneity in extinction
mod <- rnorm(time, mean=0, sd=0.2)
# function similating diversification process
# taken from CladeRates.R, only difference is time variability in relative extinction rates
# Clades at a given level of relative extinction speciate into clades with slighly lower or higher extinction
# Up to 6% of a clades newly speciated members change their relative extinction rate
# Arguments:
# epsilon - the given relative extinction rate of the current clade
# clades - the richness levels of all clades organized by time and clade
# ind - the current time
timestep <- function(ep, clades, ind){
ep <- as.character(ep) # what intial epsilon does this clade have
i <- match(ep, epsilon) # index of that epsilon value in the vector
# needed to know which other possible values of epsilon are nearby
eps_mod <- epsilon + mod[ind]
mu <- ifelse(eps_mod<0,0,eps_mod)* lambda # extinction/my
r <- lambda - mu # diversification/my
# if this is the lowest value of epsilon
if (i == 1){
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.97 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
clades[ind-1, ep]
# if this is the second lowest value of epsilon
} else if (i == 2){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.95 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
clades[ind-1, ep]
# if this is the second highest level of epsilon
} else if (epsilon[i] == epsilon[length(epsilon) -1]){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
clades[ind, ep] <- 0.95 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1, ep2_] * (r[i-2]) +
clades[ind-1, ep]
# if this is the highest level of epsilon
} else if (epsilon[i] == epsilon[length(epsilon)]){
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
clades[ind, ep] <- 0.97 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1,ep2_] * (r[i-2]) +
clades[ind-1, ep]
# if this is any other value of epsilon
} else{
ep1_ <- as.character(epsilon[i-1]) # next lower level of epsilon
ep2_ <- as.character(epsilon[i-2]) # 2 levels lower for epsilon
ep1 <- as.character(epsilon[i+1]) # next higher level of epsilon
ep2 <- as.character(epsilon[i+2]) # 2 levels up for epsilon
clades[ind, ep] <- 0.94 * clades[ind-1, ep] * (r[i]) +
0.02 * clades[ind-1, ep1] * (r[i+1]) +
0.01 * clades[ind-1, ep2] * (r[i+2]) +
0.02 * clades[ind-1, ep1_] * (r[i-1]) +
0.01 * clades[ind-1,ep2_] * (r[i-2]) +
clades[ind-1, ep]
}
return(clades)
}
# run the function
for (i in 2:time){
for (ep in epsilon){
species <- timestep(ep = ep, clades = species, ind = i)
}
}
S_total <- rev(apply(species,MARGIN = 1,FUN = sum)) # total up the species across clades, put into reverse chronological order
df <- as.data.frame(species)
df$time <- time:1 # want years to start at 4000 mya
species_df <- gather(df, key = epsilon, value = Richness, `0.1`:`0.9`)
species_df$Richness <- ifelse(species_df$Richness == 0, 10^-20, species_df$Richness)
(p1<- ggplot(species_df, aes(x = time, y = Richness, color = as.double(epsilon))) +
geom_line(aes(group = as.double(epsilon)), size = 0.5) +
scale_x_reverse("Time (Mya)", breaks = c(0, 1000, 2000, 3000, 4000)) +
scale_y_log10(limits = c(1, S_total[1]), breaks = 10^(seq(1,14, by = 2))) +
stat_function(fun = function(time) log10(S_total[time]), color = "black", linetype = "dashed") + # total number of species
scale_color_viridis(expression(epsilon), option = "C") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
)
install.packages("kableExtra")
install.packages("R.utils")
getwd()
setwd(wd)
wd <- "~/Documents/LennonLab/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
setwd(wd)
getwd()
rm(list=ls()) # removes all objects in the given environment
wd <- "~/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
getwd()
setwd(wd)
source("code/functions.R")
# Load packages
require("png")
require("grid")
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(scales))
suppressPackageStartupMessages(library(viridis))
source("code/functions.R")
lambda <- runif(n = 40000, min = 0.008, max = 0.031) # speciation rates
summary(lambda)
hist(lambda)
rm(list=ls()) # removes all objects in the given environment
wd <- "~/Documents/LennonLab/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
setwd(wd)
require(ggplot2, quietly = T)
require(viridis, quietly = T)
source("code/functions.R")
### VARIABLE SPECIATION AND EXTINCTION
# Note: reduce number of simulations to reduce run time
# I used 400000 to make the heatmap more smooth
lambda <- runif(n = 40000, min = 0.008, max = 0.031) # speciation rates
epsilon <- runif(n = 40000, min = 0.1, max = 0.9) # mu/lambda
mu <- c() # extinction rates
r <- c() # diversification rates
S <- integer(length = 40000) + 1 # keeps track of species for each set of parameters
for(t in 2:4000) {
ep <- rnorm(n = epsilon, mean = epsilon, sd = 0.2) # give me an epsilon near the actual epsilon for all simulations per time step
ep <- ifelse(ep<0,0.01,ep) # if Eb is ever less than 0, make it 0.1
ep <- ifelse(ep>1,0.9,ep) # upper bound is 0.9
lam <- rnorm(n = lambda, mean = lambda, sd = 0.01) # do a similar thing for lambda
lam <- ifelse(lam<0.008,0.008)
lam <- ifelse(lam>0.031,0.031)
mu <- lambda * ep # extinction rate
r <- lambda - mu # diversification rate
S <- S * exp(r) # discrete exponential growth, pure birth
}
df <- data.frame(lambda, epsilon, mu, r, S)
df <- cbind(df2, rounding_scheme(S))
# heatmap 2
(p1 <- ggplot(data = df, aes(x = lambda, y = epsilon, color = roundS)) +
geom_point(size = 1.8) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Log(Richness)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
## SETUP ENVIRONMENT
rm(list=ls()) # removes all objects in the given environment
wd <- "~/Documents/LennonLab/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
getwd()
setwd(wd)
require(ggplot2, quietly = T)
require(viridis, quietly = T)
source("code/functions.R")
### VARIABLE SPECIATION AND EXTINCTION
# Note: reduce number of simulations to reduce run time
# I used 400000 to make the heatmap more smooth
lambda <- runif(n = 40000, min = 0.008, max = 0.031) # speciation rates
epsilon <- runif(n = 40000, min = 0.1, max = 0.9) # mu/lambda
mu <- c() # extinction rates
r <- c() # diversification rates
S <- integer(length = 40000) + 1 # keeps track of species for each set of parameters
for(t in 2:4000) {
ep <- rnorm(n = epsilon, mean = epsilon, sd = 0.2) # give me an epsilon near the actual epsilon for all simulations per time step
ep <- ifelse(ep<0,0.01,ep) # if Eb is ever less than 0, make it 0.1
ep <- ifelse(ep>1,0.9,ep) # upper bound is 0.9
lam <- rnorm(n = lambda, mean = lambda, sd = 0.01) # do a similar thing for lambda
lam <- ifelse(lam<0.008,0.008,lam)
lam <- ifelse(lam>0.031,0.031,lam)
mu <- lambda * ep # extinction rate
r <- lambda - mu # diversification rate
S <- S * exp(r) # discrete exponential growth, pure birth
}
df <- data.frame(lambda, epsilon, mu, r, S)
df <- cbind(df2, rounding_scheme(S))
# heatmap 2
(p1 <- ggplot(data = df, aes(x = lambda, y = epsilon, color = roundS)) +
geom_point(size = 1.8) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Log(Richness)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
df <- cbind(df, rounding_scheme(S))
# heatmap 2
(p1 <- ggplot(data = df, aes(x = lambda, y = epsilon, color = roundS)) +
geom_point(size = 1.8) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Log(Richness)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
## SETUP ENVIRONMENT
rm(list=ls()) # removes all objects in the given environment
wd <- "~/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
getwd()
setwd(wd)
require(ggplot2, quietly = T)
require(viridis, quietly = T)
source("code/functions.R")
### VARIABLE SPECIATION AND EXTINCTION
# Note: reduce number of simulations to reduce run time
# I used 400000 to make the heatmap more smooth
lambda <- runif(n = 400000, min = 0.008, max = 0.031) # speciation rates
epsilon <- runif(n = 400000, min = 0.1, max = 0.9) # mu/lambda
mu <- c() # extinction rates
r <- c() # diversification rates
S <- integer(length = 40000) + 1 # keeps track of species for each set of parameters
for(t in 2:4000) {
ep <- rnorm(n = epsilon, mean = epsilon, sd = 0.2) # give me an epsilon near the actual epsilon for all simulations per time step
ep <- ifelse(ep<0,0.01,ep) # if Eb is ever less than 0, make it 0.1
ep <- ifelse(ep>1,0.9,ep) # upper bound is 0.9
lam <- rnorm(n = lambda, mean = lambda, sd = 0.01) # do a similar thing for lambda
lam <- ifelse(lam<0.008,0.008,lam)
lam <- ifelse(lam>0.031,0.031,lam)
mu <- lambda * ep # extinction rate
r <- lambda - mu # diversification rate
S <- S * exp(r) # discrete exponential growth, pure birth
}
df <- data.frame(lambda, epsilon, mu, r, S)
df <- cbind(df, rounding_scheme(S))
# heatmap 2
(p1 <- ggplot(data = df, aes(x = lambda, y = epsilon, color = roundS)) +
geom_point(size = 1.8) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Log(Richness)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank())
)
# Save figure
fig1_dir <- paste(figure_dir, "VariableSpeciationExtinctionHeatmap.png", sep = "")
ggsave(plot = p1, filename = fig1_dir, width = 7, height = 5)
