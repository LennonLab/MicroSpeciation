require(viridis)
## define parameters alpha and beta
sims = 400000 # number of simulations
lambda <- runif(n = sims, min = 0.008, max = 0.031) # speciation rates
epsilon <- runif(n = sims, min = 0.1, max = 0.9) # mu/lambda
mu <- lambda * epsilon # extinction rates
r <- lambda - mu # diversification rate
t <- 1
Time <- 4000 # total time to present
# alpha and beta are terms in the probability generating function
alpha <- (mu*(exp(r*Time)-1))/(lambda*exp(r*Time)-mu)
beta <- alpha*(lambda/mu)
## density function
# func <- function(S) (1-alpha)*(1-beta)*beta^(S-1)
## probability generating function
pgf <- function(Smin, Smax){
prob <- double(length(lambda))
for (i in 1:length(lambda)){
func <- function(S) (1-alpha[i])*(1-beta[i])*beta[i]^(S-1)
prob[i] <- integrate(func, Smin, Smax)$value
}
return(prob)
}
## plot relative, normalized, or unaltered probabilities
probPlot <- function(df){
return(ggplot(data = df, aes(x = lambda, y = epsilon, color = prob)) +
geom_point(size = 0.4) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Probability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank()))
}
# Probability of having exactly 10^12 species
# prob12 <- integrate(func, 0.385*10^12, 3.43*10^12)$value
dfS12 <- data.frame(lambda, epsilon, prob = pgf(0.385*10^12, 3.43*10^12))
(pS12 <- probPlot(dfS12))
# Probability of being in range for Louca et al. 2019
dfS6 <- data.frame(lambda, epsilon, prob = pgf(2.2*10^6, 4.3*10^12))
(pS6 <- probPlot(dfS6))
# Probability of being in range for Louca et al. 2019
dfS6 <- data.frame(lambda, epsilon, prob = pgf(2.2*10^6, 4.3*10^6))
(pS6 <- probPlot(dfS6))
df6_12 <- data.frame(lambda, epsilon, prob = dfS12$prob + dfS6$prob)
probPlot(df6_12)
## SETUP ENVIRONMENT
rm(list=ls()) # removes all objects in the given environment
wd <- "~/Documents/LennonLab/GitHub/MicroSpeciation"
data_dir <- paste(wd, "/data/", sep = "")
figure_dir <- paste(wd, "/figures/", sep = "")
getwd()
setwd(wd)
require(ggplot2)
require(viridis)
## define parameters alpha and beta
sims = 400000 # number of simulations
lambda <- runif(n = sims, min = 0.001, max = 0.031) # speciation rates
epsilon <- runif(n = sims, min = 0.1, max = 0.9) # mu/lambda
mu <- lambda * epsilon # extinction rates
r <- lambda - mu # diversification rate
t <- 1
Time <- 4000 # total time to present
# alpha and beta are terms in the probability generating function
alpha <- (mu*(exp(r*Time)-1))/(lambda*exp(r*Time)-mu)
beta <- alpha*(lambda/mu)
## density function
# func <- function(S) (1-alpha)*(1-beta)*beta^(S-1)
## probability generating function
pgf <- function(Smin, Smax){
prob <- double(length(lambda))
for (i in 1:length(lambda)){
func <- function(S) (1-alpha[i])*(1-beta[i])*beta[i]^(S-1)
prob[i] <- integrate(func, Smin, Smax)$value
}
return(prob)
}
## plot relative, normalized, or unaltered probabilities
probPlot <- function(df){
return(ggplot(data = df, aes(x = lambda, y = epsilon, color = prob)) +
geom_point(size = 0.4) +
xlab(expression(lambda*" (Species/Myr)")) +
scale_y_continuous(expression(epsilon), breaks = c(0.1, 0.3, 0.5, 0.7, 0.9)) +
scale_color_viridis("Probability") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "right",
axis.line = element_blank()))
}
# Probability of having exactly 10^12 species
dfS12 <- data.frame(lambda, epsilon, prob = pgf(0.385*10^12, 3.43*10^12))
(pS12 <- probPlot(dfS12))
# Probability of being in range for Louca et al. 2019
dfS6 <- data.frame(lambda, epsilon, prob = pgf(2.2*10^6, 4.3*10^6))
(pS6 <- probPlot(dfS6))
df6_12 <- data.frame(lambda, epsilon, prob = dfS12$prob + dfS6$prob)
probPlot(df6_12)
# Probability of being in range for Louca et al. 2019
dfS6 <- data.frame(lambda, epsilon, prob = pgf(0.22*10^6, 4.3*10^6))
df6_12 <- data.frame(lambda, epsilon, prob = dfS12$prob + dfS6$prob)
probPlot(df6_12)
## variance
variance <- (lambda + mu)/(lambda - mu) * exp((lambda - mu)*Time)*(exp((lambda - mu)*Time) - 1)
length(variance)
dfvar <- data.frame(lambda, epsilon, prob = variance)
(pvar <- probPlot(dfvar))
summary(variance)
variance <- ifelse(variance > 10^20, 10^20, variance)
dfvar <- data.frame(lambda, epsilon, prob = variance)
(pvar <- probPlot(dfvar))
expectS <- exp(r * Time)
dfvar <- data.frame(lambda, epsilon, prob = variance/expectS)
(pvar <- probPlot(dfvar))
variance <- ifelse(variance > 10^20, 10^20, variance)
## variance
variance <- (lambda + mu)/(lambda - mu) * exp((lambda - mu)*Time)*(exp((lambda - mu)*Time) - 1)
summary(variance)
summary(expectS)
summary(variance/expectS)
dfvar <- data.frame(lambda, epsilon, prob = variance/expectS)
(pvar <- probPlot(dfvar))
dfvar <- data.frame(lambda, epsilon, prob = (variance)^0.5/expectS)
(pvar <- probPlot(dfvar))
summary((variance)^0.5)
summary((variance)^0.5/expectS)
dfvar <- data.frame(lambda, epsilon, prob = (variance)^0.5)
(pvar <- probPlot(dfvar))
dfvar <- data.frame(lambda, epsilon, prob = (variance)^0.5/expectS)
(pvar <- probPlot(dfvar))
lambda <- 0.015
mu <- 0.007
r <- lambda- mu
r
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
P_greater <- function(k) {
beta^(k-1)
}
P_lower <- function(k) {
1 - beta^(k-1)
}
P_greater(10^12)
P_greater(10^14)
P_greater(10^20)
P_greater(10^18)
P_greater(10^17)
## define parameters alpha and beta
sims = 400000 # number of simulations
lambda <- runif(n = sims, min = 0.001, max = 0.031) # speciation rates
epsilon <- runif(n = sims, min = 0.1, max = 0.9) # mu/lambda
mu <- lambda * epsilon # extinction rates
r <- lambda - mu # diversification rate
t <- 1
Time <- 4000 # total time to present
summary(beta)
# another thing
r <- lambda - mu
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
summary(beta)
r
summary(P_greater(10^12))
round(0.001, digits = 2)
round(0.001, digits = 3)
round(0.001120192019, digits = 3)
round(0.001120192019, digits = 4)
round(1.001120192019, digits = 4)
# another thing
lambda <- 0.015
mu <- 0.007
r <- lambda - mu
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
P_greater <- function(k) {
return(beta^(k-1))
}
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRounding1 = TRUE
stillRounding2 = TRUE
klow <- 0
khigh <- 10^30
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 3)==0.970,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 3)==0.970,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding1){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 3)==0.970,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 3)==0.970,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
}
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding1){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
}
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding1){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
}
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 1)==0.9,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 1)==0.9,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding1){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 1)==0.9,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 1)==0.9,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
}
k
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 10, 17)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 1)==0.9,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 1)==0.9,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding1){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 1)==0.9,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 1)==0.9,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
}
P_greater
lower
upper
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 10, 17)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 1)==0.9,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 1)==0.9,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding1){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 1)==0.9,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 1)==0.9,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
if(round(lower,1)==0.5){
print("yep")
}
}
stillRounding1
log10(102)
integer(log10(102))
as.integer(log10(102))
as.integer(log10(102))+1
as.integer(log10(102121))+1
as.integer(log10(0.21))+1
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 10, 17)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 1)==0.9,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 1)==0.9,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding2){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 1)==0.9,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 1)==0.9,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
if(round(lower,1)==0.5){
print("yep")
}
}
klow
khigh
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 10, 17)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding2){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
if(round(lower,1)==0.5){
print("yep")
}
}
klow
kigh
khigh
klow <- 0
khigh <- 10^30
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 10, 17)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding2){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
if(round(lower,1)==0.5){
print("yep")
}
}
klow
khigh
stillRounding1 = TRUE
stillRounding2 = TRUE
klow <- 0
khigh <- 10^30
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 10, 17)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding2){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
if(round(lower,1)==0.5){
print("yep")
}
}
klow
khigh
stillRounding1 = TRUE
stillRounding2 = TRUE
klow <- 0
khigh <- 10^30
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding2){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 2)==0.98,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 2)==0.98,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
}
klow
khigh
stillRounding1 = TRUE
stillRounding2 = TRUE
klow <- 0
khigh <- 10^30
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRounding1&stillRounding1){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding2){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
}
klow
khigh
stillRounding1 = TRUE
stillRounding2 = TRUE
klow <- 0
khigh <- 10^30
while (stillRounding1|stillRounding2) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRounding1&stillRounding2){
lower <- P_greater(k)
upper <- P_lower(k)
stillRounding1 <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRounding2 <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
khigh <- ifelse(!stillRounding2,k,khigh)
} else if(stillRounding2){
upper <- P_lower(k)
stillRounding2 <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRounding2,k,khigh)
} else{
lower <- P_greater(k)
stillRounding1 <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRounding1,k,klow)
}
}
klow
khigh
sims = 400000 # number of simulations
lambda <- runif(n = sims, min = 0.001, max = 0.031) # speciation rates
epsilon <- runif(n = sims, min = 0.1, max = 0.9) # mu/lambda
mu <- lambda * epsilon # extinction rates
r <- lambda - mu # diversification rate
t <- 1
Time <- 4000 # total time to present
# Confidence intervals
# lambda <- 0.015
# mu <- 0.007
r <- lambda - mu
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
P_greater <- function(k) {
return(beta^(k-1))
}
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^30
