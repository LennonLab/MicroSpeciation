upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
rm(list=ls())
lambda <- 0.015
mu <- 0.007
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
ks <- double(sims)
CIs <- function()
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
klow
khigh
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
rm(list=ls())
lambda <- 0.015
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
klow
khigh
lambda <- 0.008
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 1, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
k
beta^(10^12 -1)
beta^(10^0 -1)
beta^(10^2 -1)
upper
lower
# Confidence intervals
rm(list=ls())
lambda <- 0.008
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
ks <- double(sims)
CIs <- function()
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 2)==0.97,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 2)==0.97,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
klow
khigh
1 - beta^(k-1)
1 - beta^(10-1)
1 - beta^(100-1)
1 - beta^(0-1)
1 - beta^(1-1)
1 - beta^(10^12-1)
1 - beta^(10^5-1)
1 - beta^(10^3-1)
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 5, 23)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 0, 50)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
klow
khigh
rm(list=ls())
lambda <- 0.0031
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
ks <- double(sims)
CIs <- function()
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 0, 50)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
klow
khigh
rm(list=ls())
lambda <- 0.0031
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
ks <- double(sims)
CIs <- function()
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 0, 50)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
klow
khigh
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 0, 50)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
klow
khigh
lambda <- 0.031
mu <- 0.007
Time <- 4000
r <- lambda - mu
rm(list=ls())
lambda <- 0.031
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 0, 50)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
beta(10^50-1)
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# Confidence intervals
rm(list=ls())
lambda <- 0.031
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 0, 50)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
}
rm(list=ls())
lambda <- 0.021
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
# probability that richness at a given time is greater than k
P_greater <- function(k) {
return(beta^(k-1))
}
# probability that richness at a given time is less than k
P_lower <- function(k) {
return(1 - beta^(k-1))
}
stillRoundingLow = TRUE
stillRoundingHigh = TRUE
klow <- 0
khigh <- 10^100
lambda <- 0.020
mu <- 0.007
Time <- 4000
r <- lambda - mu
# from Magallon et al 2002
beta <- (exp(r*Time)-1)/(exp(r*Time) - mu/lambda)
0.975 * 0.975
klow
khigh
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 0, 50)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
evalWithTimeout(Sys.sleep(1), timeout = 1)
}
require(utils)
while (stillRoundingLow|stillRoundingHigh) {
k <- runif(n = 1,min = 0, max = 10) * 10 ^runif(n=1, 0, 50)
if (stillRoundingLow&stillRoundingHigh){
lower <- P_greater(k)
upper <- P_lower(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingHigh){
upper <- P_lower(k)
stillRoundingHigh <- ifelse(round(upper, digits = 3)==0.975,FALSE,TRUE)
khigh <- ifelse(!stillRoundingHigh,k,khigh)
} else if(stillRoundingLow){
lower <- P_greater(k)
stillRoundingLow <- ifelse(round(lower, digits = 3)==0.975,FALSE,TRUE)
klow <- ifelse(!stillRoundingLow,k,klow)
}
evalWithTimeout(Sys.sleep(1), timeout = 1)
}
install.packages("sys")
